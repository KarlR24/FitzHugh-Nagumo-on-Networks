import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
import seaborn as sns
from pathlib import Path
import os
from datetime import datetime


def phase_coh_freq(number_simulation_runs, range_initial_states, coupling, network, a, b, tau, delta_t, T, every_x_run, last_steps):
    '''
    number_simulation_runs: integer
        number of simulations to run for phase coherence plots
    
    range_initial_states: positiv integer
        size of rectangle around origin from which initial states are drawn according to uniform distribution
    
    coupling: float
        coupling strength between oscillators
    
    network: networkx graph
        
    a, b, tau: float
        parameters for FitzHugh-Nagumo
    
    delta_t, T: float
        for Euler approximation of the differential equations
        
    every_x_run: integer
        for every x-th run in the simulation, the individual node dynamics will be analysis and GIFs & plots generated
        
    last_steps: interger (< T/delta_t)
        number of time units/steps where eg. phase coherence frequency is analysed and chimera GIF are generated
        want to analyse time where network has reached a stable state of (some degree of) synchronicity
        
     
         
    phase coherence measure: 
    "The synchronization of FitzHughâ€“Nagumo neuron network coupled by gap junction" - Zhan Yong, Zhang Su-Hua, Zhao Tong-Jun, An Hai-Long, Zhang Zhen-Dong, Han Ying-Rong, Liu Hui, and Zhang Yu-Hong
    
                     1
            R(t) =  --- * sum_i,j { [v_i(t) - v_j(t)]^2 } 
                    N^2
                    
        where {} denotes the average of a stochastic random variable
    '''
    
    
    # to generate random initial conditions for every node and every run
    number_nodes = network.number_of_nodes()
    
    # create matrix with dimensions (time steps in simulation x number of runs)
    # one simulation run measures the coherence of the whole network for all time steps
    # at the end one simulation run is one curve in the plot 
    phase_coherence_v = np.empty([int(T/delta_t)+1, number_simulation_runs], dtype=float)
    
    #to reduce computational time all we compute the phase coherence only for the first variable v
    
    act_mat = None
    sns.set_style("whitegrid")

    # for every run we want different random initial states -> generate new for every run!
    for simulation_run in range(int(number_simulation_runs)): 
        model = FitzHugh_Nagumo_coupled(coupling=coupling, network=network, a=a, b=b, tau=tau, delta_t=delta_t, T=T, initial_states=np.array([np.random.uniform(-range_initial_states, range_initial_states, size=number_nodes), np.random.uniform(-range_initial_states, range_initial_states, size=number_nodes)]))
        act_mat = model.run(model.adj_mat) 
        t_steps, N = act_mat[0].shape   
        
        A0 = act_mat[0] # states of v
        maxact = A0.max()
        minact = A0.min()
        
        for timestep in range(int(t_steps)):
            
            
            # get the difference of the states for all nodes for fixed time step 'timestep':
            # take empirical average since there is no random variable involved
            # because the difference is taken of two states divide by 2 to take average
            state_vi, state_vj = np.meshgrid(A0[timestep, :], A0[timestep, :])
            
            # absolute value because pairwise differences are squared in formula and therefore positive
            #interactions_v = 2**(-1)*(state_vi - state_vj) 
            interactions_v = (maxact - minact)**(-1)*(state_vi - state_vj)
            
            # to take the squares of the differences in the formula we multilply the array with its transposed
            # note that: here only row i of the interaction matrix is multiplied with column i of its transposed
            # therfore only the interactions we are interested in are squared
            intact_sq_v = [np.matmul(interactions_v[i,:], interactions_v.T[:,i]) for i in range(N)]
            
            # to get double sum in formula we only need to sum up all entries of the first column 
            coherence_v = N**(-2)*(np.sum(intact_sq_v)) 

            # write phase coherence into matrix for every timestep and run
            # (1-coherence_v) to have 0 correspond to total asynchronicity and 1 correspond to total synchronicity
            phase_coherence_v[timestep, simulation_run] = 1-coherence_v
        
        
        # analyse the local node dynamics (=activity matrix) for every "x"-number of runs
        if simulation_run % every_x_run == 0:
            # make heatmap of the spatiotemporal node activity 
            plt.figure(figsize=(14, 20))

            # heatmap
            fig = sns.heatmap(act_mat[0][:,:], vmin=minact, vmax=maxact, cmap=matplotlib.cm.cividis, 
                        xticklabels=100, yticklabels=10000)
            fig.invert_yaxis()
            plt.title('Spatiotemporal Node Activity', fontsize = 20) 
            plt.xlabel('Nodes', fontsize = 16) 
            plt.ylabel('Timesteps', fontsize = 16) 
            # save the figure
            plt.savefig('spatiotemporal_activity.png', dpi=600)
            plt.show()
            
            
            start_sampl = int(T/delta_t)- last_steps
            
            # we are interested in "later steps" of the simulation run where synchronization has/can happened
            # to analyse the oscillation of nodes we use the Fast Fourier Transform
            A = act_mat[0]
            nodesignal = A[int(start_sampl):,:]
            FFT_node = np.fft.fft(nodesignal, axis=0)

            # FFT gives us complex values -> use absolute value
            mag = np.abs(FFT_node)
            freq = np.fft.fftfreq(len(FFT_node), delta_t)
        
            
            fig, (ax0, ax1, ax2, ax3) = plt.subplots(4, 1, figsize=(20,30))
            plt.subplots_adjust(hspace=0.4)
            
            # plot activity of all nodes k: u_k vs time (where k = 1,..., N)
            ax0.plot(nodesignal)
            sns.set_style("whitegrid")
            ax0.set_title('Oscillation of Nodes in Run %s' %str(simulation_run+1), fontsize = 20)
            ax0.set_xlabel('Time', fontsize=16)
            ax0.set_ylabel('Magnitude', fontsize=16)
            
            
            # plot frequency analysis from randomly sampled nodes: frequencies vs magnitude
            number_samples = int(np.ceil(np.sqrt(len(range(0,N)))) + 1)
            #rand_sampl = sorted(rd.choices(range(0,N), k=number_samples))
            [ax1.plot(100/freq[1:], mag[1:,i]) for i in rd.choices(range(0,N), k=number_samples)]
            plt.xlim([0, 100*max([freq[find_peaks(mag[:,i])[0][0:3]].max() for i in range(len(mag.T))])])
            plt.ylim([0, max([mag[1:,i].max() for i in range(len(mag.T))])+100])
            sns.set_style("whitegrid")
            ax1.set_title(r'$\frac{1}{Frequency}$ of %s Randomly Sampled Nodes' %number_samples, fontsize = 20)
            ax1.set_xlabel(r'$\frac{1}{Frequency}$', fontsize=16)
            ax1.set_ylabel('Magnitude', fontsize=16)
            
            # plot the activity of node 1: u_1 vs time
            # this is for comparison with the frequency analysis of the phase coherence in the same run
            ax2.plot(nodesignal[:,0])
            sns.set_style("whitegrid")
            ax2.set_title('Oscillation Node 1 in Run %s' %str(simulation_run+1), fontsize = 20)
            ax2.set_xlabel('Time', fontsize=16)
            ax2.set_ylabel('$v_{1}$', fontsize=16)

            # plot frequencies vs magnitude for the most important ones
            #plt.axis((0, 30, 0, 17000))
            sns.set_style("whitegrid")
            ax3.set_title('FFT: Frequencies of Node 1 in Run %s' %str(simulation_run+1), fontsize = 20)
            ax3.plot(100*freq, mag[:,0])
            plt.xlim([0, 100*max(freq[find_peaks(mag[:,0])[0][:4]])])
            plt.ylim([0, int(mag[:,0].max()+100)])
            ax3.set_xlabel('Frequency', fontsize=16)
            ax3.set_ylabel('Magnitude', fontsize=16)
            plt.show()
        
            # print most important frequencies for given run
            mn = find_peaks(mag[:,0])
            print('run', simulation_run+1, 'frequency for first peak index', mn[0][0], 'of node 1:', freq[mn[0][0]],
                 '*10^(-2) --> period:', 100/freq[mn[0][0]])
            print('run', simulation_run+1, 'frequency for second peak index', mn[0][1], 'of node 1:', freq[mn[0][1]],
                 '*10^(-2) --> period:', 100/freq[mn[0][1]])
        
            
            # Make GIFs for individual runs:
            # chimera GIF: 
            # make sure that no 'old' png's left in directory
            [f.unlink() for f in Path('/Users/username/your/directory/pngs').glob("*") if f.is_file()]
            scatter_chim_gif(act_mat, 0, 150)
            video_maker(0.1, '/Users/username/your/directory/pngs')
            #GIF_creator(0.1, '/Users/username/your/directory/pngs', '/Users/username/your/directory/GIF')
            [f.unlink() for f in Path('/Users/username/your/directory/pngs').glob("*") if f.is_file()]
        
            # blinking network GIF
            pos = nx.circular_layout(network)
            image_creator(network, act_mat, pos, matplotlib.cm.cividis, 0, 150)
            video_maker(0.1, '/Users/username/your/directory/pngs')
            #GIF_creator(0.1, '/Users/username/your/directory/pngs', '/Users/username/your/directory/GIF')
            [f.unlink() for f in Path('/Users/username/your/directory/pngs').glob("*") if f.is_file()]
        
            #pos = nx.circular_layout(network)
            #net_coh_gif(network, act_mat, pos, matplotlib.cm.cividis, phase_coherence_v, simulation_run, 0, 200)
            #(network, act_mat, pos, matplotlib.cm.cividis, 50, 200)
            #GIF_creator(0.1, '/Users/username/your/directory/pngs', '/Users/username/your/directory/GIF')
            #[f.unlink() for f in Path('/Users/username/your/directory/pngs').glob("*") if f.is_file()]
            # runaround GIF for first 5.000 steps
            runaround(act_mat, 0, 100000, 150)
            video_maker(0.1, '/Users/username/your/directory/pngs')
            #GIF_creator(0.1, '/Users/username/your/directory/pngs', '/Users/username/your/directory/GIF')
            [f.unlink() for f in Path('/Users/username/your/directory/pngs').glob("*") if f.is_file()]
            
            
            # runaround GIF for first 5.000 steps
            #runaround(act_mat, 95000, 100000, 10)
            #video_maker(0.1, '/Users/username/your/directory/pngs')
            #GIF_creator(0.1, '/Users/username/your/directory/pngs', '/Users/karl/FitzHugh-Nagumo dynamics/GIF')
            
        else:
            pass
        
        
        
        

    # now use phase_coherence_v/-w matrices to make plots
    sns.set_style("whitegrid")
    _, ax = plt.subplots(figsize=(20, 4))
    ax.plot(phase_coherence_v)
    plt.title('Simulations = %s' %number_simulation_runs, fontsize = 20)
    ax.set_xlabel('Time t', fontsize=16)
    ax.set_ylabel('Coherence Measure', fontsize=16) #R(t) for v
    plt.show()
    
    
    # Frequency analyisis of phase coherence matrix
    start_sampl = int(T/delta_t)-last_steps

    signal = phase_coherence_v[int(start_sampl):,:]
    FFT_sig = np.fft.fft(signal, axis=0)

    magnitude = np.abs(FFT_sig)
    #PSD = magnitude**2 # power spectral density
    freqs = np.fft.fftfreq(len(FFT_sig), delta_t)
    
    #print('We start sampling the phase coherence at t =', start_sampl)

    # figures
    fig, (ax4, ax5) = plt.subplots(2, 1, figsize=(20,20))
    plt.subplots_adjust(hspace=0.4)

    # plot the phase coherences of all runs: coherence vs time steps
    ax4.plot(signal)
    ax4.set_title('Phase Coherence Measure for last %s Timesteps' %str(int(last_steps)), fontsize = 20)
    ax4.set_xlabel('Time', fontsize=16)
    ax4.set_ylabel('Coherence Measure', fontsize=16)

    # plot frequency analysis of phase coherences: frequencies vs magnitude
    ax5.set_title('FFT: Frequencies of Phase Coherence for last %s Timesteps' %str(int(last_steps)), fontsize = 20)
    ax5.plot(100*freqs, magnitude)
    plt.xlim([0, 100*max([freqs[find_peaks(magnitude[:,i])[0][0:3]].max() for i in range(len(magnitude.T))])])
    plt.ylim([0, max([magnitude[1:,i].max() for i in range(len(magnitude.T))])+100])
    ax5.set_xlabel('Frequency', fontsize=16)
    ax5.set_ylabel('Magnitude', fontsize=16)

    plt.show()
    
    # print most important frequencies for every run
    for run in range(number_simulation_runs):
        m = find_peaks(magnitude[:,run])
        print('run', run+1, ': frequency for first peak index of coherence', m[0][0],':', freqs[m[0][0]], 
              '*10^(-2) --> period:', 100/freqs[m[0][0]])
        print('run', run+1, ': frequency for second peak index of coherence', m[0][1],':', freqs[m[0][1]], 
              '*10^(-2) --> period:', 100/freqs[m[0][1]])
        print('\n')
    
    # make extra phase coherence plots plots for filtered runs           
    for simrun in range(0, number_simulation_runs, every_x_run):
        # plot phase coherence for filtered run "simrun"
        _, ax = plt.subplots(figsize=(20, 4))
        ax.plot(phase_coherence_v[:, simrun])
        ax.set_title('Simulation Run = %s' %str(simrun+1), fontsize = 20)
        ax.set_xlabel('Time t', fontsize=16)
        ax.set_ylabel('Phase Coherence', fontsize=16)
        
        # plot frequency analysis of the filtered simlution run "simrun"
        _, ax = plt.subplots(figsize=(20, 4))
        ax.plot(100*freqs, magnitude[:, simrun])
        plt.xlim([0, 100*max(freqs[find_peaks(magnitude[:, simrun])[0][:4]])])
        plt.ylim([0, int(magnitude[:, simrun].max()+100)])
        ax.set_title('Frequencies for Simulation Run = %s' %str(simrun+1), fontsize = 20)
        ax.set_xlabel('Frequencies', fontsize=16)
        ax.set_ylabel('Magnitude', fontsize=16)
        
        # GIF phase coherence 
        [f.unlink() for f in Path('/Users/karl/FitzHugh-Nagumo dynamics/pngs').glob("*") if f.is_file()]
        coh_gif(phase_coherence_v, simrun, 150)
        video_maker(0.1, '/Users/username/your/directory/pngs')
        #GIF_creator(0.1, '/Users/username/your/directory/pngs', '/Users/username/your/directory/GIF')
        
        
        
